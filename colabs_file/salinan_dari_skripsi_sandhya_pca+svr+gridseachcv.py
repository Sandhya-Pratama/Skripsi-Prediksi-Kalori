# -*- coding: utf-8 -*-
"""Salinan dari Skripsi_sandhya.PCA+SVR+GridseachCV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dt3OV6t25J3cIGziDsc-eLZui-sQ-_Vy
"""

import numpy as np
import joblib
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV, KFold
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

combined_data = pd.read_csv('calories+exercise.csv')

combined_data.head()

combined_data.replace({'Gender':{'male':0,'female':1}},inplace=True)
combined_data.drop(['User_ID'], axis=1, inplace=True)
combined_data.head()

X=combined_data.drop(['Calories'],axis=1)
Y=combined_data['Calories']

# Random sampling
sample_size = int(0.9 * len(combined_data))  # Contoh: 80% dari dataset asli
X_sampled, _, y_sampled, _ = train_test_split(X, Y, train_size=sample_size, random_state=0)

# 4. Preprocessing Data (Scaling)
scaler = StandardScaler()
X_sampled_scaled = scaler.fit_transform(X_sampled)

# Split data menjadi training dan test set
X_train, X_test, y_train, y_test = train_test_split(X_sampled_scaled, y_sampled, test_size=0.2, random_state=0)

"""**PCA**"""

feature_names = ['Gender', 'Age', 'Height', 'Weight', 'Duration', 'Heart_Rate', 'Body_Temp']

from sklearn.decomposition import PCA
from sklearn.model_selection import GridSearchCV
import numpy as np

# Langkah 1: Latih model PCA dengan GridSearchCV
pca = PCA()
param_grid = {
    'n_components': np.arange(2, len(feature_names) + 1)
}

grid_search = GridSearchCV(pca, param_grid, cv=10, verbose=1)
grid_search.fit(X_train)

# Langkah 2: Tampilkan fitur yang dipilih oleh PCA
best_pca = grid_search.best_estimator_
selected_features = [feature_names[i] for i in range(best_pca.n_components_)]

print("Selected Features after PCA:")
print(selected_features)

pca_best = PCA(n_components=best_n_components)

X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)

best_svr = SVR(C=10, epsilon=0.1, gamma=0.1, kernel='rbf')

# Fit the model to the training data
best_svr.fit(X_train_pca, y_train)

# Make predictions on the test data
y_pred = best_svr.predict(X_test_pca)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)
print(f"Mean Absolute Error: {mae}")
print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")
print(f"R2 Score: {r2}")

# Now you can make predictions on new data
new_data = {
    'Gender': [0],  # 0 for male, 1 for female
    'Age': [20],  # Replace with the desired age
    'Height': [190],  # Replace with the desired height in centimeters
    'Weight': [94],  # Replace with the desired weight in kilograms
    'Duration': [29],  # Replace with the desired duration
    'Heart_Rate': [100],  # Replace with the desired heart rate
    'Body_Temp': [40.8]  # Replace with the desired body temperature

}

# Create a DataFrame from the input data
new_data_df = pd.DataFrame(new_data)

# Preprocess the new data
new_data_scaled = scaler.transform(new_data_df)  # Transform using the fitted StandardScaler
new_data_pca = pca.transform(new_data_scaled)  # Transform using the fitted PCA

# Make predictions using the trained model
calories_predicted = best_svr.predict(new_data_scaled)

# Print the predicted calories
print("Predicted Calories:", calories_predicted[0])
